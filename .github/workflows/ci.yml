name: CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  pages: write          # needed for Pages deploy
  id-token: write       # needed for OIDC auth

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Playwright builds & starts Next via webServer in config
      - name: Run Playwright tests (smoke)
        run: npm run test:e2e

      # Always upload the report artifact for PRs & debugging
      - name: Upload Playwright report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7

  deploy-report:
    # Only deploy the report to Pages on pushes to main (avoid overwriting on PRs)
    if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: e2e
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - name: Download report artifact
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: ./playwright-report

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./playwright-report

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
  deploy_prod:
    name: Deploy to Vercel (prod)
    needs: e2e
    if: github.ref == 'refs/heads/main' && needs.e2e.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      # Pull Vercel env (Production) to .vercel/
      - name: Vercel pull (prod env)
        run: npx vercel pull --yes --environment=production --token=$VERCEL_TOKEN

      # Build your Next app with Vercel (creates .vercel/output)
      - name: Vercel build (prebuild on CI)
        run: npx vercel build --prod --token=$VERCEL_TOKEN

      # Deploy the prebuilt output to production
      - name: Vercel deploy (production)
        id: deploy
        run: |
          URL=$(npx vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN)
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Echo deployed URL
        run:  |
          echo "Production deployed: ${{ steps.deploy.outputs.url }}"
