{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer2/source-files\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport remarkGfm from \"remark-gfm\";\n\nconst computed = {\n  slug: {\n    type: \"string\",\n    resolve: (doc: any) => doc._raw.flattenedPath.replace(/^projects\\//, \"\").replace(/^writing\\//, \"\"),\n  },\n  url: {\n    type: \"string\",\n    resolve: (doc: any) =>\n      doc.type === \"Project\" ? `/projects/${doc._raw.flattenedPath.replace(/^projects\\//, \"\")}`\n                             : `/writing/${doc._raw.flattenedPath.replace(/^writing\\//, \"\")}`,\n  },\n} as const;\n\nexport const Project = defineDocumentType(() => ({\n  name: \"Project\",\n  filePathPattern: `projects/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    date: { type: \"date\", required: true },\n    summary: { type: \"string\", required: true },\n    tags: { type: \"list\", of: { type: \"string\" }, required: false },\n    draft: { type: \"boolean\", required: false, default: false },\n  },\n  computedFields: computed,\n}));\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `writing/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    date: { type: \"date\", required: true },\n    summary: { type: \"string\", required: true },\n    tags: { type: \"list\", of: { type: \"string\" } },\n    draft: { type: \"boolean\", default: false },\n  },\n  computedFields: computed,\n}));\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Project, Post],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [rehypeAutolinkHeadings, { behavior: \"wrap\" }],\n    ],\n  },\n});"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AACnC,OAAO,eAAe;AAEtB,IAAM,WAAW;AAAA,EACf,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAa,IAAI,KAAK,cAAc,QAAQ,eAAe,EAAE,EAAE,QAAQ,cAAc,EAAE;AAAA,EACnG;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,SAAS,CAAC,QACR,IAAI,SAAS,YAAY,aAAa,IAAI,KAAK,cAAc,QAAQ,eAAe,EAAE,CAAC,KAC9D,YAAY,IAAI,KAAK,cAAc,QAAQ,cAAc,EAAE,CAAC;AAAA,EACzF;AACF;AAEO,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IAC9D,OAAO,EAAE,MAAM,WAAW,UAAU,OAAO,SAAS,MAAM;AAAA,EAC5D;AAAA,EACA,gBAAgB;AAClB,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAC7C,OAAO,EAAE,MAAM,WAAW,SAAS,MAAM;AAAA,EAC3C;AAAA,EACA,gBAAgB;AAClB,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,SAAS,IAAI;AAAA,EAC7B,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA,CAAC,wBAAwB,EAAE,UAAU,OAAO,CAAC;AAAA,IAC/C;AAAA,EACF;AACF,CAAC;",
  "names": []
}
